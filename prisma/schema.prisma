generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RssFeed {
  id       String           @id @default(uuid())
  name     String
  url      String           @unique
  nameId   String           @unique @default("la-boite-de-chocolat")
  episodes PodcastEpisode[]
}

model PodcastEpisode {
  id            String            @id @default(uuid())
  rssFeedId     String
  title         String
  description   String
  pubDate       DateTime
  audioUrl      String            @unique
  duration      Int?
  slug          String?           @unique
  episode       Int?
  season        Int?
  createdAt     DateTime          @default(now())
  genre         String?
  imgFileName   String?
  updatedAt     DateTime          @updatedAt
  age           String?
  rssFeed       RssFeed           @relation(fields: [rssFeedId], references: [id])
  links         PodcastFilmLink[]
  ratings       Rating[]
  transcription Transcription?
}

model Film {
  id          String            @id @default(uuid())
  title       String
  slug        String            @unique
  year        Int?
  imgFileName String?
  sagaId      String?
  director    String?
  alloCineId  Int?              @unique
  tmdbId      Int?              @unique
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  age         String?
  saga        Saga?             @relation(fields: [sagaId], references: [id])
  links       PodcastFilmLink[]
}

model Saga {
  id          String   @id @default(uuid())
  name        String
  description String?
  filmsOrder  String[]
  imgFileName String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tmdbId      Int?     @unique
  slug        String   @unique
  films       Film[]
}

model PodcastFilmLink {
  id        String         @id @default(uuid())
  podcastId String
  filmId    String
  film      Film           @relation(fields: [filmId], references: [id])
  podcast   PodcastEpisode @relation(fields: [podcastId], references: [id])
}

model Rating {
  id        String         @id @default(uuid())
  userId    String
  episodeId String
  rating    Int            @db.SmallInt
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  episode   PodcastEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, episodeId])
  @@map("rating")
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?   @default("user")
  banExpires    DateTime?
  banReason     String?
  banned        Boolean?
  accounts      Account[]
  ratings       Rating[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Transcription {
  id        String         @id @default(uuid())
  episodeId String         @unique
  fileName  String
  fileSize  Int?
  fileType  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  episode   PodcastEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@map("transcription")
}
