generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RssFeed {
  id       String           @id @default(uuid())
  name     String
  url      String           @unique
  nameId   String           @unique @default("la-boite-de-chocolat")
  episodes PodcastEpisode[]
}

model PodcastEpisode {
  id          String            @id @default(uuid())
  rssFeedId   String
  title       String
  description String
  pubDate     DateTime
  audioUrl    String            @unique
  duration    Int? // Dur√©e en secondes
  slug        String?           @unique
  season      Int?
  episode     Int?
  imgFileName String?
  genre       String?
  age         String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  rssFeed     RssFeed           @relation(fields: [rssFeedId], references: [id])
  links       PodcastFilmLink[]
  ratings     Rating[]
}

model Film {
  id          String            @id @default(uuid())
  title       String
  slug        String            @unique
  year        Int?
  director    String?
  imgFileName String?
  tmdbId      Int?              @unique // ID TMDB du film
  alloCineId  Int?              @unique // ID AlloCine du film
  sagaId      String?
  age         String?
  saga        Saga?             @relation(fields: [sagaId], references: [id])
  links       PodcastFilmLink[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Saga {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  imgFileName String?
  tmdbId      Int?     @unique // ID TMDB de la saga
  filmsOrder  String[] // IDs des films dans l'ordre
  films       Film[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PodcastFilmLink {
  id        String         @id @default(uuid())
  podcastId String
  filmId    String
  film      Film           @relation(fields: [filmId], references: [id])
  podcast   PodcastEpisode @relation(fields: [podcastId], references: [id])
}

model Rating {
  id        String         @id @default(uuid())
  userId    String
  episodeId String
  rating    Int            @db.SmallInt // 1-5
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  episode   PodcastEpisode @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, episodeId])
  @@map("rating")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  role          String?   @default("user")
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  ratings       Rating[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
